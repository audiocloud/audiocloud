import { Requester, Result } from "./base"
export * from "./base"
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AmplifierId".
 */
export type AmplifierId = "input" | "output" | "global" | "insert_input" | "insert_output"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AmplifierParameterRole".
 */
export type AmplifierParameterRole = "enable" | "gain" | "distortion" | "slew_rate"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AmplifierReportRole".
 */
export type AmplifierReportRole =
  | "peak_volume"
  | "rms_volume"
  | "lufs_volume_momentary"
  | "lufs_volume_short_term"
  | "lufs_volume_integrated"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelId".
 */
export type ModelId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AppId".
 */
export type AppId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AppMediaObjectId".
 */
export type AppMediaObjectId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AppTaskId".
 */
export type AppTaskId = string
/**
 * The App has been updated
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AppUpdated".
 */
export type AppUpdated = {
  updated: AppId
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ChannelMask".
 */
export type ChannelMask =
  | {
      mono: number
    }
  | {
      stereo: number
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ChannelParameterRole".
 */
export type ChannelParameterRole = "pan"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "CloudError".
 */
export type CloudError =
  | {
      type: "api_key_not_found"
    }
  | {
      id: AppMediaObjectId
      type: "app_file_not_found"
    }
  | {
      id: AppId
      type: "app_not_found"
    }
  | {
      task_id: string
      type: "invalid_app_task_id"
    }
  | {
      object_id: string
      type: "invalid_app_media_object_id"
    }
  | {
      type: "only_future_reservations"
    }
  | {
      type: "time_malformed"
    }
  | {
      minimum: number
      requested: number
      type: "duration_too_short"
    }
  | {
      max: number
      type: "too_many_tasks"
    }
  | {
      message: string
      type: "internal_inconsistency"
    }
  | {
      instance_ids: FixedInstanceId[]
      type: "overlapping_fixed_instances"
    }
  | {
      connection_id: NodeConnectionId
      error: CloudError
      type: "connection_error"
    }
  | {
      channels: number
      mask: ChannelMask
      type: "channel_mask_incompatible"
    }
  | {
      mixer_node_id: MixerNodeId
      type: "mixer_node_not_found"
    }
  | {
      track_node_id: TrackNodeId
      type: "track_node_not_found"
    }
  | {
      fixed_node_id: FixedInstanceNodeId
      type: "fixed_instance_node_not_found"
    }
  | {
      dynamic_node_id: DynamicInstanceNodeId
      type: "dynamic_instance_node_not_found"
    }
  | {
      domain_id: DomainId
      type: "domain_not_found"
    }
  | {
      instance_id: FixedInstanceId
      type: "instance_not_found"
    }
  | {
      model_id: ModelId
      type: "model_not_found"
    }
  | {
      domain_id: DomainId
      model_id: ModelId
      node_id: DynamicInstanceNodeId
      type: "dynamic_instance_not_supported"
    }
  | {
      domain_id: DomainId
      instance_id: FixedInstanceId
      node_id: FixedInstanceNodeId
      type: "fixed_instance_not_supported"
    }
  | {
      app_id: AppId
      domain_id: DomainId
      instance_id: FixedInstanceId
      node_id: FixedInstanceNodeId
      type: "fixed_instance_access_denied"
    }
  | {
      available: number
      requested: number
      resource: ResourceId
      type: "out_of_resource"
    }
  | {
      task_id: AppTaskId
      type: "task_not_found"
    }
  | {
      error: ModifyTaskError
      type: "task_modification"
    }
  | {
      message: string
      type: "database"
    }
  | {
      message: string
      type: "authentication"
    }
  | {
      message: string
      type: "authorization"
    }
  | {
      type: "blocking_lock"
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FixedInstanceId".
 */
export type FixedInstanceId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "NodeConnectionId".
 */
export type NodeConnectionId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "MixerNodeId".
 */
export type MixerNodeId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TrackNodeId".
 */
export type TrackNodeId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FixedInstanceNodeId".
 */
export type FixedInstanceNodeId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DynamicInstanceNodeId".
 */
export type DynamicInstanceNodeId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainId".
 */
export type DomainId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ResourceId".
 */
export type ResourceId = "ram" | "cpu" | "gpu" | "antelope_dsp" | "universal_audio_dsp"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModifyTaskError".
 */
export type ModifyTaskError =
  | {
      node_id: TrackNodeId
      type: "track_exists"
    }
  | {
      node_id: FixedInstanceNodeId
      type: "fixed_instance_exists"
    }
  | {
      node_id: DynamicInstanceNodeId
      type: "dynamic_instance_exists"
    }
  | {
      node_id: MixerNodeId
      type: "mixer_exists"
    }
  | {
      node_id: TrackNodeId
      type: "track_does_not_exist"
    }
  | {
      node_id: FixedInstanceNodeId
      type: "fixed_instance_does_not_exist"
    }
  | {
      node_id: DynamicInstanceNodeId
      type: "dynamic_instance_does_not_exist"
    }
  | {
      node_id: MixerNodeId
      type: "mixer_does_not_exist"
    }
  | {
      connection_id: NodeConnectionId
      type: "connection_does_not_exist"
    }
  | {
      connection_id: NodeConnectionId
      type: "connection_exists"
    }
  | {
      connection_id: NodeConnectionId
      message: string
      type: "connection_malformed"
    }
  | {
      media_id: TrackMediaId
      node_id: TrackNodeId
      type: "media_exists"
    }
  | {
      media_id: TrackMediaId
      node_id: TrackNodeId
      type: "media_does_not_exist"
    }
  | {
      type: "cycle_detected"
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TrackMediaId".
 */
export type TrackMediaId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ControlChannels".
 */
export type ControlChannels = "global" | "left" | "right" | "generic"
/**
 * A pad that can receive connections on a node inside a task
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "OutputPadId".
 */
export type OutputPadId =
  | {
      mixer: MixerNodeId
    }
  | {
      fixed: FixedInstanceNodeId
    }
  | {
      dynamic: DynamicInstanceNodeId
    }
  | {
      track: TrackNodeId
    }
/**
 * A pad that can receive connections on a node inside a task
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InputPadId".
 */
export type InputPadId =
  | {
      mixer: MixerNodeId
    }
  | {
      fixed: FixedInstanceNodeId
    }
  | {
      dynamic: DynamicInstanceNodeId
    }
/**
 * Channel count for media items and track nodes
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "MediaChannels".
 */
export type MediaChannels = "mono" | "stereo"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TrackMediaFormat".
 */
export type TrackMediaFormat = "wave" | "mp3" | "flac" | "wavpack"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "MediaObjectId".
 */
export type MediaObjectId = string
/**
 * Source of commands for domains
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainCommandSource".
 */
export type DomainCommandSource =
  | "disabled"
  | {
      jet_stream: {
        /**
         * Topic to load for commands
         */
        topic: string
        /**
         * where to connect to
         */
        url: string
      }
    }
  | {
      kafka: {
        /**
         * Kafka broker list to be used for commands and events
         */
        brokers: string
        /**
         * Read after this offset from event stream, or default to the latest one persisted
         */
        offset?: number | null
        /**
         * SASL SCRAM password used to consume commands
         */
        password: string
        /**
         * Topic where commands to the domain will be sent
         */
        topic: string
        /**
         * Username used to consume commands
         */
        username: string
      }
    }
/**
 * Source of commands for domains
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainEventSink".
 */
export type DomainEventSink =
  | "disabled"
  | "log"
  | {
      jet_stream: {
        /**
         * Topic to write events to
         */
        topic: string
        /**
         * Valid NATS URL to connect to
         */
        url: string
      }
    }
  | {
      kafka: {
        /**
         * Kafka broker list to be used for commands and events
         */
        brokers: string
        /**
         * SASL SCRAM password used to produce events
         */
        password: string
        /**
         * Topic where events from the domain may be sent
         */
        topic: string
        /**
         * Username used to produce events
         */
        username: string
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstanceDriverId".
 */
export type InstanceDriverId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "EngineId".
 */
export type EngineId = string
/**
 * Source for models
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainModelSource".
 */
export type DomainModelSource =
  | {
      inline: {
        /**
         * All model information for parameter and report validation
         */
        models: {
          [k: string]: Model
        }
      }
    }
  | {
      local: {
        /**
         * The local path where models are stored
         */
        path: string
      }
    }
  | {
      remote: {
        /**
         * Refresh interval, in milliseconds
         */
        refresh_interval_ms: number
        /**
         * URL where models are going to reside
         */
        url: string
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelCapability".
 */
export type ModelCapability = "power_distributor" | "audio_router" | "audio_mixer" | "digital_input_output"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelInput".
 */
export type ModelInput =
  | ("sidechain" | "midi")
  | {
      audio: ControlChannels
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelOutput".
 */
export type ModelOutput =
  | "midi"
  | {
      audio: ControlChannels
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelValue".
 */
export type ModelValue = string | number | boolean
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelParameterRole".
 */
export type ModelParameterRole =
  | ("no_role" | "power")
  | {
      global: GlobalParameterRole
    }
  | {
      channel: ChannelParameterRole
    }
  | {
      /**
       * @minItems 2
       * @maxItems 2
       */
      amplifier: [AmplifierId, AmplifierParameterRole]
    }
  | {
      /**
       * @minItems 2
       * @maxItems 2
       */
      dynamics: [DynamicsId, DynamicsParameterRole]
    }
  | {
      /**
       * @minItems 2
       * @maxItems 2
       */
      filter: [FilterId, FilterParameterRole]
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "GlobalParameterRole".
 */
export type GlobalParameterRole = "enable" | "bypass"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DynamicsId".
 */
export type DynamicsId = "total" | "compressor" | "gate" | "limiter" | "de_esser"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DynamicsParameterRole".
 */
export type DynamicsParameterRole =
  | "ratio"
  | "threshold"
  | "ceiling"
  | "attack"
  | "release"
  | "auto_release"
  | "auto_attack"
  | "auto_ratio"
  | "knee"
  | "detector_input"
  | "detector_material"
  | "detector_filter"
  | "mid_emphasis"
/**
 * What kind of filter
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FilterId".
 */
export type FilterId =
  | "high_pass"
  | "low"
  | "low_mid"
  | "mid"
  | "high_mid"
  | "high"
  | "low_pass"
  | "band_pass"
  | "dynamics"
  | "de_esser"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FilterParameterRole".
 */
export type FilterParameterRole = "gain" | "gain_direction" | "frequency" | "bandwidth" | "type"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelElementScope".
 */
export type ModelElementScope =
  | ("global" | "all_inputs" | "all_outputs")
  | {
      count: number
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelValueUnit".
 */
export type ModelValueUnit = "no" | "percent" | "dB" | "hz" | "oct" | "toggle" | "amps" | "watthrs"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelValueOption".
 */
export type ModelValueOption = ModelValue | [ModelValue, ModelValue]
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelReportRole".
 */
export type ModelReportRole =
  | "no_role"
  | {
      power: PowerReportRole
    }
  | {
      /**
       * @minItems 2
       * @maxItems 2
       */
      amplifier: [AmplifierId, AmplifierReportRole]
    }
  | {
      /**
       * @minItems 2
       * @maxItems 2
       */
      dynamics: [DynamicsId, DynamicsReportRole]
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "PowerReportRole".
 */
export type PowerReportRole = "powered" | "current" | "power_factor" | "total_energy"
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DynamicsReportRole".
 */
export type DynamicsReportRole = "gain_reduction" | "gain_reduction_limit_hit"
/**
 * The domain has been updated
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainUpdated".
 */
export type DomainUpdated = {
  updated: DomainId
}
/**
 * Confirming download is created
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DownloadCreated".
 */
export type DownloadCreated = {
  created: {
    domain_id: DomainId
    media_id: AppMediaObjectId
  }
}
/**
 * Confirming media object is scheduled for deletion
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "MediaObjectDeleted".
 */
export type MediaObjectDeleted = {
  deleted: {
    media_id: AppMediaObjectId
  }
}
/**
 * Modify a task
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModifyTask".
 */
export type ModifyTask =
  | {
      spec: {
        /**
         * Specification change
         */
        spec: ModifyTaskSpec
      }
    }
  | {
      set_security: {
        /**
         * Secure key to add or overwrite
         */
        key: SecureKey
        /**
         * Permissions to set for the secure key
         */
        security: TaskPermissions
      }
    }
  | {
      revoke_security: {
        /**
         * Secure key to revoke
         */
        key: SecureKey
      }
    }
/**
 * Modify task structure
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModifyTaskSpec".
 */
export type ModifyTaskSpec =
  | {
      add_track: {
        /**
         * Number of channels for the track node
         */
        channels: MediaChannels
        /**
         * New track node id
         */
        track_id: TrackNodeId
      }
    }
  | {
      add_track_media: {
        /**
         * Media id within the track node
         */
        media_id: TrackMediaId
        /**
         * Media object specification
         */
        spec: TrackMedia
        /**
         * Track node id
         */
        track_id: TrackNodeId
      }
    }
  | {
      update_track_media: {
        /**
         * Media id within the track node
         */
        media_id: TrackMediaId
        /**
         * Track node id
         */
        track_id: TrackNodeId
        /**
         * Media object update
         */
        update: UpdateTaskTrackMedia
      }
    }
  | {
      delete_track_media: {
        /**
         * Media id within the track node
         */
        media_id: TrackMediaId
        /**
         * Track node id
         */
        track_id: TrackNodeId
      }
    }
  | {
      delete_track: {
        /**
         * Track node id
         */
        track_id: TrackNodeId
      }
    }
  | {
      add_fixed_instance: {
        /**
         * Fixed instance node id
         */
        fixed_id: FixedInstanceNodeId
        /**
         * Fixed instance node processing specification
         */
        spec: FixedInstanceNode
      }
    }
  | {
      add_dynamic_instance: {
        /**
         * Dynamic instance node id
         */
        dynamic_id: DynamicInstanceNodeId
        /**
         * Dynamic instance node processing specification
         */
        spec: DynamicInstanceNode
      }
    }
  | {
      add_mixer: {
        /**
         * Mixer node id
         */
        mixer_id: MixerNodeId
        /**
         * Mixer node processing specification
         */
        spec: MixerNode
      }
    }
  | {
      delete_mixer: {
        /**
         * Moxer node id
         */
        mixer_id: MixerNodeId
      }
    }
  | {
      delete_fixed_instance: {
        /**
         * Fixed instance node id
         */
        fixed_id: FixedInstanceNodeId
      }
    }
  | {
      delete_dynamic_instance: {
        /**
         * Dynamic instance node id
         */
        dynamic_id: DynamicInstanceNodeId
      }
    }
  | {
      delete_connection: {
        /**
         * Connection id
         */
        connection_id: NodeConnectionId
      }
    }
  | {
      add_connection: {
        /**
         * Connection id
         */
        connection_id: NodeConnectionId
        /**
         * Source node pad
         */
        from: OutputPadId
        /**
         * Source channel mask
         */
        from_channels: ChannelMask
        /**
         * Panning adjustment on the audio passing through the connection
         */
        pan: number
        /**
         * Destination node pad
         */
        to: InputPadId
        /**
         * Destination channel mask
         */
        to_channels: ChannelMask
        /**
         * Volume adjustment on audio passing through the connection
         */
        volume: number
      }
    }
  | {
      set_connection_parameter_values: {
        /**
         * Connection id
         */
        connection_id: NodeConnectionId
        /**
         * Values (parameters) on the connection
         */
        values: ConnectionValues
      }
    }
  | {
      set_fixed_instance_parameter_values: {
        /**
         * Fixed instance node id
         */
        fixed_id: FixedInstanceNodeId
        /**
         * Values to set
         */
        values: {
          [k: string]: unknown
        }
      }
    }
  | {
      set_dynamic_instance_parameter_values: {
        /**
         * Dynamic instance node id
         */
        dynamic_id: DynamicInstanceNodeId
        /**
         * Values to set
         */
        values: {
          [k: string]: unknown
        }
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "SecureKey".
 */
export type SecureKey = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModifyTaskList".
 */
export type ModifyTaskList = ModifyTask[]
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ReportMediaJobProgress".
 */
export type ReportMediaJobProgress =
  | {
      upload_from_domain: {
        app_id: AppId
        media_id: MediaObjectId
        state: MediaJobState
      }
    }
  | {
      download_to_domain: {
        app_id: AppId
        media_id: MediaObjectId
        state: MediaJobState
        task_id?: TaskId | null
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskId".
 */
export type TaskId = string
/**
 * Task created successfully
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskCreated".
 */
export type TaskCreated =
  | {
      created: {
        /**
         * App creating the task
         */
        app_id: AppId
        /**
         * Task Id
         */
        task_id: TaskId
      }
    }
  | {
      dry_run: {
        /**
         * App creating the task
         */
        app_id: AppId
        /**
         * Task Id
         */
        task_id: TaskId
      }
    }
/**
 * Task was deleted successfully
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskDeleted".
 */
export type TaskDeleted = {
  deleted: {
    /**
     * App creating the task
     */
    app_id: AppId
    /**
     * Task Id
     */
    task_id: TaskId
    /**
     * Version when deleted
     */
    version: number
  }
}
/**
 * Task was updated successfully
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskUpdated".
 */
export type TaskUpdated = {
  updated: {
    /**
     * App creating the task
     */
    app_id: AppId
    /**
     * Task Id
     */
    task_id: TaskId
    /**
     * New version to be used with `If-Matches` when submitting further modifications
     */
    version: number
  }
}
/**
 * Confirming upload is created
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "UploadCreated".
 */
export type UploadCreated = {
  created: {
    domain_id: DomainId
    media_id: AppMediaObjectId
  }
}

export interface CloudApi {
  [k: string]: unknown
}
/**
 * Add maintenance to an object
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AddMaintenance".
 */
export interface AddMaintenance {
  /**
   * WHat is the reason for maintenance (human readable string or URL with more information
   */
  reason: string
  /**
   * When is it taking place
   */
  time: TimeRange
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TimeRange".
 */
export interface TimeRange {
  from: string
  to: string
}
/**
 * Adjust the task time
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AdjustTaskTime".
 */
export interface AdjustTaskTime {
  /**
   * If not null, overwrite the starting time
   */
  from?: string | null
  /**
   * If not null, overwrite the ending time
   */
  to?: string | null
}
/**
 * Fixed instance summary for apps
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "AppFixedInstance".
 */
export interface AppFixedInstance {
  /**
   * Configured maintenance time windows during which the instance should not serve requests
   */
  maintenance: Maintenance[]
  /**
   * If true, the instance is using media and may rewind
   */
  media: boolean
  /**
   * If true, the instance may need to be powered up
   */
  power: boolean
  /**
   * Additional models with parameters or reports that are merged with the instance model
   */
  sidecars: ModelId[]
}
/**
 * Maintenance window
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "Maintenance".
 */
export interface Maintenance {
  /**
   * Human readable string about it, or URL to a web page detailing more information
   */
  reason: string
  /**
   * Time during which maintenance is taking place (may overlap with others)
   */
  time: TimeRange
}
/**
 * Clear maintenance from an object
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ClearMaintenance".
 */
export interface ClearMaintenance {
  /**
   * If not null, clear all maitnenance after this timestamp
   */
  after?: string | null
  /**
   * If not null, clear all maitnenance before this timestamp
   */
  before?: string | null
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ConnectionValues".
 */
export interface ConnectionValues {
  pan?: number | null
  volume?: number | null
}
/**
 * Create a task
 *
 * Tasks describe graphs of media operations that may execute in real time or unattended as a render. They are allocated to a domain and an engine within that domain. Operations are executed with the help of instances, which are fixed hardware blocks or dynamically instanced software components.
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "CreateTask".
 */
export interface CreateTask {
  /**
   * Domain that will be executing the task
   */
  domain_id: DomainId
  /**
   * When true, do not actually create a task, just validate the process
   */
  dry_run: boolean
  /**
   * Task reservations
   */
  reservations: CreateTaskReservation
  /**
   * Security keys and associateds permissions
   */
  security: {
    [k: string]: TaskPermissions
  }
  /**
   * Task specification
   */
  spec: CreateTaskSpec
}
/**
 * Timed resource reservations for the task (must contain all used resources)
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "CreateTaskReservation".
 */
export interface CreateTaskReservation {
  /**
   * Fixed instances reserved for the task
   */
  fixed_instances: FixedInstanceId[]
  /**
   * Start of the reservation time
   */
  from: string
  /**
   * End of the reservation time
   */
  to: string
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskPermissions".
 */
export interface TaskPermissions {
  audio: boolean
  media: boolean
  parameters: boolean
  structure: boolean
  transport: boolean
}
/**
 * Create task spec
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "CreateTaskSpec".
 */
export interface CreateTaskSpec {
  /**
   * Connections between nodes
   */
  connections?: {
    [k: string]: NodeConnection
  }
  /**
   * Dynamic instance nodes of the task
   */
  dynamic?: {
    [k: string]: DynamicInstanceNode
  }
  /**
   * Fixed instance nodes of the task
   */
  fixed?: {
    [k: string]: FixedInstanceNode
  }
  /**
   * Mixer nodes of the task
   */
  mixers?: {
    [k: string]: MixerNode
  }
  /**
   * Track nodes of the task
   */
  tracks?: {
    [k: string]: TrackNode
  }
}
/**
 * Connection between nodes in a task
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "NodeConnection".
 */
export interface NodeConnection {
  /**
   * Source node pad
   */
  from: OutputPadId
  /**
   * Source channel mask
   */
  from_channels: ChannelMask
  /**
   * Panning adjustment
   *
   * Zero is centered, -1 is fully left, 1 is fully right
   */
  pan: number
  /**
   * Destination node pad
   */
  to: InputPadId
  /**
   * Destination channel mask
   */
  to_channels: ChannelMask
  /**
   * Volume adjustment as a factor
   */
  volume: number
}
/**
 * Dynamic node specification
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DynamicInstanceNode".
 */
export interface DynamicInstanceNode {
  /**
   * The manufacturer and name of the processing software
   */
  model_id: ModelId
  /**
   * Parameter values
   */
  parameters: {
    [k: string]: unknown
  }
}
/**
 * Fixed instance node specification
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FixedInstanceNode".
 */
export interface FixedInstanceNode {
  /**
   * The manufacturer, name and instance identifier of the hardware device doing the processing
   */
  instance_id: FixedInstanceId
  /**
   * parameters
   */
  parameters: {
    [k: string]: unknown
  }
  /**
   * Dry-wet percentage
   *
   * only applicable for instances with same number of inputs and outputs, having 1 or 2 channels.
   */
  wet: number
}
/**
 * Mixer node specification
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "MixerNode".
 */
export interface MixerNode {
  /**
   * Numvber of input channels on the mixer node
   */
  input_channels: number
  /**
   * Number of output channels on the mixer node
   */
  output_channels: number
}
/**
 * Track node specification
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TrackNode".
 */
export interface TrackNode {
  /**
   * Number of channels
   */
  channels: MediaChannels
  /**
   * Media items present on the track
   */
  media: {
    [k: string]: TrackMedia
  }
}
/**
 * Media item specification
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TrackMedia".
 */
export interface TrackMedia {
  /**
   * Number of channels
   */
  channels: MediaChannels
  /**
   * Media format
   */
  format: TrackMediaFormat
  /**
   * Subset of media that is used
   */
  media_segment: TimeSegment
  /**
   * Source media object id
   */
  object_id: MediaObjectId
  /**
   * Where to place the media in the task timeline
   */
  timeline_segment: TimeSegment
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TimeSegment".
 */
export interface TimeSegment {
  length: number
  start: number
}
/**
 * Used by domain for booting up.
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainConfig".
 */
export interface DomainConfig {
  /**
   * Apps allowed to access the domain
   */
  apps?: AppId[]
  /**
   * Source for commands from the cloud to the domain
   */
  command_source?: DomainCommandSource & string
  /**
   * Id of the domain
   */
  domain_id: DomainId
  /**
   * Dynamic instances configured on the domain, with associated limits
   */
  dynamic_instances?: {
    [k: string]: DynamicInstanceLimits
  }
  /**
   * Engines configured on the domain
   */
  engines?: {
    [k: string]: EngineConfig
  }
  /**
   * Sink for events from the domain to the cloud
   */
  event_sink?: DomainEventSink & string
  /**
   * Fixed instances configured on the domain
   */
  fixed_instances?: {
    [k: string]: FixedInstanceConfig
  }
  /**
   * Configured maintenance time windows during which the domain should not serve requests
   */
  maintenance?: Maintenance[]
  /**
   * Maximum number of concurrent tasks (when lower than the sum of tasks available on engines)
   */
  max_concurrent_tasks?: number | null
  /**
   * Minimum Task length
   */
  min_task_len_ms?: number
  /**
   * Source of model information for the domain (can include unused models)
   */
  models: DomainModelSource
  /**
   * Currently configured tasks
   */
  tasks?: {
    [k: string]: Task
  }
}
/**
 * Limits on dynamic instances
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DynamicInstanceLimits".
 */
export interface DynamicInstanceLimits {
  /**
   * Maximum number of concurrent dynamic instances
   *
   * Takes precedence over over total resource usage. For example, there may be more resources but licensing limits the amount of instances.
   */
  max_instances: number
}
/**
 * Information about a media engine within a domain
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "EngineConfig".
 */
export interface EngineConfig {
  /**
   * Additional configuration, specific to the engine configuration
   */
  additional?: {
    [k: string]: unknown
  }
  /**
   * Dynamic instances configured on the audio engine, with associated limits
   */
  dynamic_instances?: {
    [k: string]: DynamicInstanceLimits
  }
  /**
   * Maximum number of concurrent tasks
   */
  max_concurrent_tasks: number
  /**
   * Resources available on the domain
   */
  resources?: {
    [k: string]: number
  }
  /**
   * Native audio sample rate
   */
  sample_rate: number
}
/**
 * Configuration of a fixed instance
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FixedInstanceConfig".
 */
export interface FixedInstanceConfig {
  /**
   * Additional information specific to the driver implementation
   */
  additional?: {
    [k: string]: unknown
  }
  /**
   * Apps allowed to access the instance or null if the domain defaults are used
   */
  apps_override?: AppId[] | null
  /**
   * Which driver is using
   */
  driver?: InstanceDriverId | null
  /**
   * Configuration of how a fixed instance is connected to the domain
   */
  engine?: DomainFixedInstanceEngine | null
  /**
   * Maintenance windows on this instance
   */
  maintenance?: Maintenance[]
  /**
   * Optional configuration if instance handles media (such as tape machines)
   */
  media?: DomainMediaInstanceConfig | null
  /**
   * Optional configuration to powers on/off instance to conserve energy
   */
  power?: DomainPowerInstanceConfig | null
  /**
   * Additional models with parameters or reports that are merged with the instance model
   */
  sidecars?: ModelId[]
}
/**
 * Configuration of how a fixed instance is connected to the domain
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainFixedInstanceEngine".
 */
export interface DomainFixedInstanceEngine {
  /**
   * Engine hosting the instance, if any
   */
  engine_id: EngineId
  /**
   * Instance inputs start at index on engine
   */
  input_start: number
  /**
   * Instance outputs start at index on engine
   */
  output_start: number
}
/**
 * Instance media settings
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainMediaInstanceConfig".
 */
export interface DomainMediaInstanceConfig {
  /**
   * Lenght of the inserted media in milliseconds
   */
  length_ms: number
  /**
   * Behaviour of playing back (streaming) and hitting end of media
   *
   * - If null, rewind to start - Otherwise, rewind by specified amount of milliseconds
   */
  play_rewind?: number | null
  /**
   * WHen rewinding to make space for contiguous renders, should the driver rewind to start or just enough to start rendering
   */
  renders_rewind_to_start: boolean
}
/**
 * Instance power settings
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DomainPowerInstanceConfig".
 */
export interface DomainPowerInstanceConfig {
  /**
   * Which channel on the power instance is distributing power to this instance
   */
  channel: number
  /**
   * Number of milliseconds to wait to cool down after powering down
   */
  cool_down_ms?: number
  /**
   * Number of milliseconds to wait before automatically powering down after idle
   */
  idle_off_delay_ms?: number
  /**
   * Power instance used to distribute power to this instance
   */
  instance: FixedInstanceId
  /**
   * Number of milliseconds to wait to warm up after powering on
   */
  warm_up_ms?: number
}
/**
 * A model describes the parameters and reprots of a processor
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "Model".
 */
export interface Model {
  capabilities?: ModelCapability[]
  inputs: ModelInput[]
  media: boolean
  outputs: ModelOutput[]
  parameters: {
    [k: string]: ModelParameter
  }
  reports: {
    [k: string]: ModelReport
  }
  resources?: {
    [k: string]: number
  }
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelParameter".
 */
export interface ModelParameter {
  default?: ModelValue | null
  role: ModelParameterRole
  scope: ModelElementScope
  unit?: ModelValueUnit & string
  values: ModelValueOption[]
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "ModelReport".
 */
export interface ModelReport {
  public?: boolean
  role: ModelReportRole
  scope: ModelElementScope
  unit?: ModelValueUnit & string
  values: ModelValueOption[]
  volatile?: boolean
}
/**
 * Task information
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "Task".
 */
export interface Task {
  /**
   * Domain executing the task
   */
  domain_id: DomainId
  /**
   * Task reservations
   */
  reservations: TaskReservation
  /**
   * Security keys and associateds permissions
   */
  security: TaskSecurity
  /**
   * Task specification
   */
  spec: TaskSpec
}
/**
 * Timed resource reservations for the task (must contain all used resources)
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskReservation".
 */
export interface TaskReservation {
  /**
   * Fixed instances reserved for the task
   */
  fixed_instances: FixedInstanceId[]
  /**
   * Start of the reservation time
   */
  from: string
  /**
   * Revision number - starts at zero and change of task reservation increments it
   */
  revision: number
  /**
   * End of the reservation time
   */
  to: string
}
/**
 * Information about access keys and permissions of a task
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskSecurity".
 */
export interface TaskSecurity {
  /**
   * Revision number - starts at zero and is incremented at every change of task security
   */
  revision?: number
  /**
   * Security settings per secure key
   */
  security: {
    [k: string]: TaskPermissions
  }
}
/**
 * Task specification
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "TaskSpec".
 */
export interface TaskSpec {
  /**
   * Connections between nodes
   */
  connections?: {
    [k: string]: NodeConnection
  }
  /**
   * Dynamic instance nodes of the task
   */
  dynamic?: {
    [k: string]: DynamicInstanceNode
  }
  /**
   * Fixed instance nodes of the task
   */
  fixed?: {
    [k: string]: FixedInstanceNode
  }
  /**
   * Mixer nodes of the task
   */
  mixers?: {
    [k: string]: MixerNode
  }
  /**
   * The revision number of the specification (starts at zero, increments for every change)
   */
  revision?: number
  /**
   * Track nodes of the task
   */
  tracks?: {
    [k: string]: TrackNode
  }
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DownloadFromDomain".
 */
export interface DownloadFromDomain {
  context?: true
  notify_url?: string | null
  url: string
}
/**
 * Returned information about an app
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "GetAppResponse".
 */
export interface GetAppResponse {
  /**
   * App owner/administrator email
   */
  admin_email: string
  /**
   * If true, the app is enabled - it may make responses to the cloud API
   */
  enabled: boolean
  /**
   * App Id
   */
  id: AppId
  /**
   * The URL used to resolve object IDs to media information
   */
  media_url: string
}
/**
 * Domain summary for apps
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "GetDomainResponse".
 */
export interface GetDomainResponse {
  /**
   * If true, the domain is enabled and will serve requests if not in maitenance
   */
  enabled: boolean
  /**
   * Engines available on the domain
   */
  engines: {
    [k: string]: EngineConfig
  }
  /**
   * FIxed instances available on the domain
   */
  fixed_instances: {
    [k: string]: AppFixedInstance
  }
  /**
   * Configured maintenance time windows during which the domain should not serve requests
   */
  maintenance: Maintenance[]
  /**
   * Minimum task duration
   */
  min_task_len: number
  /**
   * Base public URL for domain API
   */
  public_url: string
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "MediaJobState".
 */
export interface MediaJobState {
  error?: string | null
  in_progress: boolean
  progress: number
  retry: number
  updated_at: string
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "UpdateTaskTrackMedia".
 */
export interface UpdateTaskTrackMedia {
  channels?: MediaChannels | null
  media_segment?: TimeSegment | null
  object_id?: MediaObjectId | null
  timeline_segment?: TimeSegment | null
}
/**
 * Request to update app
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "UpdateApp".
 */
export interface UpdateApp {
  /**
   * If not null, overwrite the administrator's email
   */
  admin_email?: string | null
  /**
   * If not null, enable or disable the app
   */
  enabled?: boolean | null
  /**
   * If not null, overwrite the URL used for resolving object IDs to media information
   */
  media_url?: string | null
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "UploadToDomain".
 */
export interface UploadToDomain {
  bytes: number
  channels: MediaChannels
  context?: true
  format: TrackMediaFormat
  notify_url?: string | null
  sample_rate: number
  seconds: number
  url: string
}
export class Client {
  constructor(private readonly requester: Requester) {}
  /**
   * Get app details
   *
   * Get details of a registered app. Only administrators and app owners may do this.
   *
   * @param app_id App to get
   */
  async get_app(app_id: AppId): Promise<Result<GetAppResponse, CloudError>> {
    return this.requester.request({ path: `/v1/apps/${app_id}`, method: "get", headers: {} })
  }
  /**
   * Update app details
   *
   * Update details of a registered app. Only administrators and app owners may do this. If the media
   * URL is changed, it will only be used for newly submitted upload and download jobs.
   *
   * @param app_id App to update
   * @param body Request body
   */
  async update_app(app_id: AppId, body: UpdateApp): Promise<Result<AppUpdated, CloudError>> {
    return this.requester.request({ path: `/v1/apps/${app_id}`, method: "patch", body: body, headers: {} })
  }
  /**
   * Delete a media object
   *
   * Delete a media object form all domains that have a copy.
   *
   * @param app_id Owner of the file
   * @param object_id File object ID
   * @param body Request body
   */
  async delete_media_object(
    app_id: AppId,
    object_id: MediaObjectId,
    body: UploadToDomain
  ): Promise<Result<MediaObjectDeleted, CloudError>> {
    return this.requester.request({
      path: `/v1/apps/${app_id}/media/${object_id}`,
      method: "delete",
      body: body,
      headers: {},
    })
  }
  /**
   * Create a task
   *
   * The task will be checked against exclusivity with other tasks, as well as resources and other
   * limits imposed by the domain configuration.
   *
   * @param app_id The app for which we are creating a task
   * @param body Request body
   */
  async create_task(app_id: AppId, body: CreateTask): Promise<Result<TaskCreated, CloudError>> {
    return this.requester.request({ path: `/v1/apps/${app_id}/tasks`, method: "post", body: body, headers: {} })
  }
  /**
   * Delete a task
   *
   * Delete a task and release all referenced resources.
   *
   * @param app_id App owning the task
   * @param task_id Task to be deleted
   */
  async delete_task(app_id: AppId, task_id: TaskId): Promise<Result<TaskDeleted, CloudError>> {
    return this.requester.request({ path: `/v1/apps/${app_id}/tasks/${task_id}`, method: "delete", headers: {} })
  }
  /**
   * Modify existing task spec
   *
   * Submit modifications to the task. This generic request can be used to update most aspects of the
   * session: adjusting parameters, creating, deleting, reconnecting nodes, changing media, etc.
   *
   * @param app_id App owning the task
   * @param task_id Task to be updated
   * @param if_match The task version for
   * @param body Request body
   */
  async modify_task_spec(
    app_id: AppId,
    task_id: TaskId,
    if_match: number,
    body: ModifyTaskList
  ): Promise<Result<TaskUpdated, CloudError>> {
    return this.requester.request({
      path: `/v1/apps/${app_id}/tasks/${task_id}/spec`,
      method: "put",
      body: body,
      headers: { "If-Match": if_match },
    })
  }
  /**
   * Modify existing task time
   *
   * Submit modifications to the task reservation time. Can be used to extend, move start or end early.
   *
   * @param app_id App owning the task
   * @param task_id Task to be updated
   * @param if_match The task version for
   * @param body Request body
   */
  async adjust_task_time(
    app_id: AppId,
    task_id: TaskId,
    if_match: number,
    body: AdjustTaskTime
  ): Promise<Result<TaskUpdated, CloudError>> {
    return this.requester.request({
      path: `/v1/apps/${app_id}/tasks/${task_id}/time`,
      method: "put",
      body: body,
      headers: { "If-Match": if_match },
    })
  }
  /**
   * Get domain details
   *
   * Get details about a domain. Available to owners, administrators and apps where the app has
   * permission to access domain details.
   *
   * @param domain_id Domain to get
   */
  async get_domain(domain_id: DomainId): Promise<Result<GetDomainResponse, CloudError>> {
    return this.requester.request({ path: `/v1/domains/${domain_id}`, method: "get", headers: {} })
  }
  /**
   * Domain requests to get its configuration
   *
   * When a domain starts in cloud mode, it will get the details of its configuration from the cloud.
   * This endpoint delivers all of the cloud information about the domain, including instances,
   * audio engines and cloud synchronization endpoints.
   *
   * @param domain_id Domain to get config for
   */
  async get_domain_config(domain_id: DomainId): Promise<Result<DomainConfig, CloudError>> {
    return this.requester.request({ path: `/v1/domains/${domain_id}/config`, method: "get", headers: {} })
  }
  /**
   * Clear instance maintenance time
   *
   * Clear any maitnenance on the instance that matches the time predicates provided.
   *
   * @param domain_id Domain hosting the instance
   * @param manufacturer Instance manufacturer
   * @param name Instance (product) name
   * @param instance Instance unique identifier
   * @param body Request body
   */
  async clear_fixed_instance_maintenance(
    domain_id: DomainId,
    manufacturer: string,
    name: string,
    instance: string,
    body: ClearMaintenance
  ): Promise<Result<DomainUpdated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/instances/${manufacturer}/${name}/${instance}/maintenance`,
      method: "delete",
      body: body,
      headers: {},
    })
  }
  /**
   * Add maitenance time to instance
   *
   * Add a designated time of maitnenance to an instance in a domain. When an instance is in
   * maintenance, it cannot process tasks. Apps will not be able to create bookings against the
   * instance that intersect with maintenance windows.
   *
   * @param domain_id Domain hosting the instance
   * @param manufacturer Instance manufacturer
   * @param name Instance (product) name
   * @param instance Instance unique identifier
   * @param body Request body
   */
  async add_fixed_instance_maintenance(
    domain_id: DomainId,
    manufacturer: string,
    name: string,
    instance: string,
    body: AddMaintenance
  ): Promise<Result<DomainUpdated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/instances/${manufacturer}/${name}/${instance}/maintenance`,
      method: "post",
      body: body,
      headers: {},
    })
  }
  /**
   * Clear domain maintenance time
   *
   * Clear any maitnenance on the domain that matches the time predicates provided.
   *
   * @param domain_id Domain to clear maitnenance on
   * @param body Request body
   */
  async clear_domain_maintenance(
    domain_id: DomainId,
    body: ClearMaintenance
  ): Promise<Result<DomainUpdated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/maintenance`,
      method: "delete",
      body: body,
      headers: {},
    })
  }
  /**
   * Add maitenance time to domain
   *
   * Add a designated time of maitnenance to the whole domain. When a domain is in maintenance, it
   * cannot serve API requests or process tasks. Apps will not be able to create bookings against the
   * domain that intersect with maintenance windows.
   *
   * @param domain_id Domain to add maintenance to
   * @param body Request body
   */
  async add_domain_maintenance(domain_id: DomainId, body: AddMaintenance): Promise<Result<DomainUpdated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/maintenance`,
      method: "post",
      body: body,
      headers: {},
    })
  }
  /**
   * Download a media object
   *
   * Download a media object from a domain to an app's private storage.
   *
   * @param domain_id Domain to download the file from
   * @param app_id Owner of the file
   * @param object_id File object ID
   * @param body Request body
   */
  async download_media_object(
    domain_id: DomainId,
    app_id: AppId,
    object_id: MediaObjectId,
    body: DownloadFromDomain
  ): Promise<Result<DownloadCreated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/media/${app_id}/${object_id}/download`,
      method: "put",
      body: body,
      headers: {},
    })
  }
  /**
   * Update upload/download progress
   *
   * Used by domains to communicate upload or download progress.
   *
   * @param domain_id Domain to download the file from
   * @param app_id Owner of the file
   * @param object_id File object ID
   * @param body Request body
   */
  async report_media_job_progress(
    domain_id: DomainId,
    app_id: AppId,
    object_id: MediaObjectId,
    body: ReportMediaJobProgress
  ): Promise<Result<DownloadCreated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/media/${app_id}/${object_id}/report`,
      method: "put",
      body: body,
      headers: {},
    })
  }
  /**
   * Uplod a media object
   *
   * Upload or replace content of a domain object from an app's private storage.
   *
   * @param domain_id Domain to upload the file to
   * @param app_id Owner of the file
   * @param object_id File object ID
   * @param body Request body
   */
  async upload_media_object(
    domain_id: DomainId,
    app_id: AppId,
    object_id: MediaObjectId,
    body: UploadToDomain
  ): Promise<Result<UploadCreated, CloudError>> {
    return this.requester.request({
      path: `/v1/domains/${domain_id}/media/${app_id}/${object_id}/upload`,
      method: "put",
      body: body,
      headers: {},
    })
  }
}
