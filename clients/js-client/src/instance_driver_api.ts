import { Requester, Result } from "./base"
export * from "./base"
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "DesiredInstancePlayState".
 */
export type DesiredInstancePlayState =
  | {
      playing: {
        play_id: PlayId
      }
    }
  | {
      rendering: {
        length: number
        render_id: RenderId
      }
    }
  | {
      stopped: {
        position?: number | null
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "PlayId".
 */
export type PlayId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "RenderId".
 */
export type RenderId = string
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "FixedInstanceId".
 */
export type FixedInstanceId = string
/**
 * A command that can be sent to the instance driver
 *
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstanceDriverCommand".
 */
export type InstanceDriverCommand =
  | ("check_connection" | "stop")
  | {
      play: {
        play_id: PlayId
      }
    }
  | {
      render: {
        length: number
        render_id: RenderId
      }
    }
  | {
      rewind: {
        to: number
      }
    }
  | {
      set_parameters: true
    }
  | {
      set_power_channel: {
        channel: number
        power: boolean
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstanceDriverError".
 */
export type InstanceDriverError =
  | ("media_not_present" | "not_power_controller" | "not_interruptable")
  | {
      instance_not_found: {
        instance: FixedInstanceId
      }
    }
  | {
      parameter_does_not_exist: {
        error: string
      }
    }
  | {
      parameters_malformed: {
        error: string
      }
    }
  | {
      reports_malformed: {
        error: string
      }
    }
  | {
      config_malformed: {
        error: string
      }
    }
  | {
      i_o_error: {
        error: string
      }
    }
  | {
      driver_not_supported: {
        manufacturer: string
        name: string
      }
    }
  | {
      r_p_c: {
        error: string
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstanceParametersUpdated".
 */
export type InstanceParametersUpdated = {
  updated: {
    id: FixedInstanceId
  }
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstancePlayState".
 */
export type InstancePlayState =
  | "stopping"
  | {
      preparing_to_play: {
        play_id: PlayId
      }
    }
  | {
      playing: {
        play_id: PlayId
      }
    }
  | {
      preparing_to_render: {
        length: number
        render_id: RenderId
      }
    }
  | {
      rendering: {
        length: number
        render_id: RenderId
      }
    }
  | {
      rewinding: {
        to: number
      }
    }
  | {
      stopped: {
        position?: number | null
      }
    }
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstanceWithStatusList".
 */
export type InstanceWithStatusList = InstanceWithStatus[]

export interface CloudApi {
  [k: string]: unknown
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "InstanceWithStatus".
 */
export interface InstanceWithStatus {
  id: FixedInstanceId
  play_state?: InstancePlayState | null
}
/**
 * This interface was referenced by `CloudApi`'s JSON-Schema
 * via the `definition` "SetInstanceParameters".
 */
export interface SetInstanceParameters {
  parameters: true
}
export class Client {
  constructor(private readonly requester: Requester) {}
  /**
   * List running instances
   *
   * List instances running on this driver enddpoint.
   *
   */
  async list_instances(): Promise<Result<InstanceWithStatusList, Error>> {
    return this.requester.request({ path: `/v1/instances`, method: "get", headers: {} })
  }
  /**
   * Set parameters
   *
   * Update instance parameter values.
   *
   * @param manufacturer Model manufacturer
   * @param name Model product name
   * @param instance Unique instance identifier
   * @param body Request body
   */
  async set_parameters(
    manufacturer: string,
    name: string,
    instance: string,
    body: SetInstanceParameters
  ): Promise<Result<InstanceParametersUpdated, InstanceDriverError>> {
    return this.requester.request({
      path: `/v1/instances/${manufacturer}/${name}/${instance}/parameters`,
      method: "patch",
      body: body,
      headers: {},
    })
  }
}
