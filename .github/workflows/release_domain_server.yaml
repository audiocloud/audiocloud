on:
  push:
    branches:
      - main
    tags:
      - v*
jobs:
  build_linux:
    strategy:
      matrix:
        target: [ aarch64, armhf, x86_64 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Setup general dependencies
        run: |
          sudo apt-get install -yqq build-essential pkg-config cmake qemu-user-static
      - name: Setup dependencies (aarch64)
        if: ${{ matrix.target == 'aarch64' }}
        shell: bash
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
          sudo apt-get update -qq
          sudo apt-get install -yqq gcc-aarch64-linux-gnu libc6-dev-arm64-cross g++-aarch64-linux-gnu libstdc++-10-dev-arm64-cross libasound2-dev:arm64 libcurl4-openssl-dev:arm64 libudev-dev:arm64 libusb-dev:arm64  
          sudo apt-get clean
      - name: Setup dependencies (armhf)
        if: ${{ matrix.target == 'armhf' }}
        run: |
          sudo dpkg --add-architecture armhf
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
          sudo apt-get update -qq
          sudo apt-get install -yqq gcc-arm-linux-gnueabihf libc6-dev-armhf-cross g++-arm-linux-gnueabihf libstdc++-10-dev-armhf-cross libasound2-dev:armhf libcurl4-openssl-dev:armhf libudev-dev:armhf libusb-dev:armhf
          sudo apt-get clean
      - name: Setup dependencies (x86_64)
        if: ${{ matrix.target == 'x86_64' }}
        run: |
          sudo apt-get install -yqq libasound2-dev libcurl4-openssl-dev libudev-dev libusb-dev
      - name: Build (aarch64)
        if: ${{ matrix.target == 'aarch64' }}
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_DIR: /usr/lib/aarch64-linux-gnu/pkgconfig
          PKG_CONFIG_LIBDIR: /usr/lib/aarch64-linux-gnu/pkgconfig
          PKG_CONFIG_SYSROOT_DIR: /usr/aarch64-linux-gnu/sysroot
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          rustup target add aarch64-unknown-linux-gnu
          cargo build --release -p domain-server --target aarch64-unknown-linux-gnu
      - name: Build (armhf)
        if: ${{ matrix.target == 'armhf' }}
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_DIR: /usr/lib/arm-linux-gnueabihf/pkgconfig
          PKG_CONFIG_LIBDIR: /usr/lib/arm-linux-gnueabihf/pkgconfig
          PKG_CONFIG_SYSROOT_DIR: /usr/arm-linux-gnueabihf/sysroot
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
        run: |
          rustup target add armv7-unknown-linux-gnueabihf
          cargo build --release -p domain-server --target armv7-unknown-linux-gnueabihf --bin domain_server
      - name: Build (x86_64)
        if: ${{ matrix.target == 'x86_64' }}
        run: |
          cargo build --release -p domain-server --bin domain_server
      - name: Upload (aarch64)
        if: ${{ matrix.target == 'aarch64' }}
        uses: actions/upload-artifact@v3
        with:
          name: domain-server-aarch64
          path: target/aarch64-unknown-linux-gnu/release/domain_server
      - name: Upload (armhf)
        if: ${{ matrix.target == 'armhf' }}
        uses: actions/upload-artifact@v3
        with:
          name: domain-server-armhf
          path: target/armv7-unknown-linux-gnueabihf/release/domain_server
      - name: Upload (x86_64)
        if: ${{ matrix.target == 'x86_64' }}
        uses: actions/upload-artifact@v3
        with:
          name: domain-server-x86_64
          path: target/release/domain_server
  release:
    needs: build_linux
    runs-on: ubuntu-latest
    steps:
      - name: Download previously generated artefacts
        uses: actions/download-artifact@v3
      - name: troubleshoot
        run: |
          pwd
          ls -l .

      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            /home/runner/work/audiocloud/audiocloud/*
          tag_name: ${{ github.ref }}
          body: |
            **Changes**
            ${{ steps.changes.outputs.changes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}