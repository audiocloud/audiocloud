on:
  push:
    tags:
      - v*
jobs:
  build:
    name: Build Domain Server
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { name: linux-x86_64, os: ubuntu-latest, rust_target: x86_64-unknown-linux-gnu, arch: x86_64, pkg_arch: '', pkg_config_arch: '', build_pkgs: '' }
          - { name: linux-aarch64, os: ubuntu-latest, rust_target: aarch64-unknown-linux-gnu, arch: arm64, pkg_arch: ':arm64', pkg_config_arch: aarch64-linux-gnu, build_pkgs: 'gcc-aarch64-linux-gnu libc6-dev-arm64-cross g++-aarch64-linux-gnu libstdc++-10-dev-arm64-cross' }
          - { name: linux-armhf, os: ubuntu-latest, rust_target: armv7-unknown-linux-gnueabihf, arch: armhf, pkg_arch: ':armhf', pkg_config_arch: arm-linux-gnueabihf, build_pkgs: 'gcc-arm-linux-gnueabihf libc6-dev-armhf-cross g++-arm-linux-gnueabihf libstdc++-10-dev-armhf-cross' }
          - { name: macos-aarch64, os: macos-latest, rust_target: aarch64-apple-darwin, arch: arm64 }
          - { name: windows-x86_64, os: windows-latest, rust_target: x86_64-pc-windows-msvc, arch: x86_64 }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Specific dependencies
        if: ${{ matrix.arch != 'x86_64' && matrix.os == 'ubuntu-latest' }}
        run: |
          sudo dpkg --add-architecture ${{ matrix.arch }}
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-${{ matrix.arch }}.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-${{ matrix.arch }}.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-${{ matrix.arch }}.list
      - name: Setup general dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update -yqq
          sudo apt-get install -yqq build-essential pkg-config cmake qemu-user-static libasound2-dev${{ matrix.pkg_arch }} libcurl4-openssl-dev${{ matrix.pkg_arch }} libudev-dev${{ matrix.pkg_arch }} libusb-dev${{ matrix.pkg_arch }} ${{matrix.build_pkgs }}
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: stable
          override: true
          targets: ${{ matrix.rust_target }}
      - name: Set up MSVC on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: TheMrMilchmann/setup-msvc-dev@v2
        with:
          arch: x64
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.arch }}-cargo-release
      - name: Setup env (aarch64-unknown-linux-gnu)
        if: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' }}
        run: |
          echo PKG_CONFIG_ALLOW_CROSS=1 >> $GITHUB_ENV
          echo PKG_CONFIG_DIR=/usr/lib/aarch64-linux-gnu/pkgconfig >> $GITHUB_ENV
          echo PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig >> $GITHUB_ENV
          echo PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/sysroot >> $GITHUB_ENV
          echo CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc >> $GITHUB_ENV
      - name: Setup env (armv7-unknown-linux-gnueabihf)
        if: ${{ matrix.rust_target == 'armv7-unknown-linux-gnueabihf' }}
        run: |
          echo PKG_CONFIG_ALLOW_CROSS=1 >> $GITHUB_ENV
          echo PKG_CONFIG_DIR=/usr/lib/arm-linux-gnueabihf/pkgconfig >> $GITHUB_ENV
          echo PKG_CONFIG_LIBDIR=/usr/lib/arm-linux-gnueabihf/pkgconfig >> $GITHUB_ENV
          echo PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf/sysroot >> $GITHUB_ENV
          echo CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc >> $GITHUB_ENV
      - name: Setup env (aarch64-apple-darwin)
        if: ${{ matrix.rust_target == 'aarch64-apple-darwin' }}
        run: |
          echo MACOSX_DEPLOYMENT_TARGET=10.13 >> $GITHUB_ENV
      - name: Download external SDK
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          curl -L https://download.steinberg.net/sdk_downloads/asiosdk_2.3.3_2019-06-14.zip -o asiosdk.zip
          unzip -q asiosdk.zip
          Move-Item -Path asiosdk_2.3.3_2019-06-14 -Destination rust\audio-engine\sdks\asio
          Get-ChildItem -Path rust\audio-engine\sdks -Recurse
      - name: Build release ${{ matrix.rust_target }}
        run: |
          cargo build --release --target ${{ matrix.rust_target }} -p domain-server --bin domain_server
          cargo build --release --target ${{ matrix.rust_target }} -p domain-server --bin ac
      - name: Rename binary (POSIX)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          find . -type f -name domain_server -exec mv {} domain-server-${{ matrix.name }}-${{ github.ref_name }} \;
          find . -type f -name ac -exec mv {} ac-${{ matrix.name }}-${{ github.ref_name }} \;
      - name: Rename binary (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          find . -type f -name domain_server.exe -exec mv {} domain-server-${{ matrix.name }}-${{ github.ref_name }}.exe \;
          find . -type f -name ac.exe -exec mv {} ac-${{ matrix.name }}-${{ github.ref_name }}.exe \;
      - name: Upload binary (POSIX)
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: domain-server-${{ matrix.name }}
          path: |
            domain-server-${{ matrix.name }}-${{ github.ref_name }}
            ac-${{ matrix.name }}-${{ github.ref_name }}
          if-no-files-found: error
      - name: Upload binary (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: domain-server-${{ matrix.name }}
          path: domain-server-${{ matrix.name }}-${{ github.ref_name }}.exe
          if-no-files-found: error
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download previously generated artefacts
        uses: actions/download-artifact@v3
      - name: troubleshoot
        run: |
          pwd
          ls -laR
      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/*
          tag_name: ${{ github.ref_name }}
          body: |
            Audio Cloud Domain Server ${{ github.ref_name }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}