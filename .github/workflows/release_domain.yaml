name: Release a new version of Domain Server
on:
  push:
    tags:
      - 'v[0-9]+.*'
jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  domain_server:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            features: --features kafka
          - build: x86_64-pc-windows-msvc
            os: windows-latest
            exe: ".exe"
          - build: x86_64-apple-darwin
            os: macos-latest
            features: --features kafka
          - build: aarch64-apple-darwin
            os: macos-latest

    name: ${{ matrix.build }} Domain Server
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.build }}-domain-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-domain-${{ env.cache-name }}-
            ${{ matrix.build }}-domain-
      - name: Setup MSVC toolchain
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libsasl2-dev protobuf-compiler
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf gsasl
      - name: Install windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc
      - name: Install rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.build }}
      - name: Build domain binary
        run: |
          cargo build --release --target=${{ matrix.build }} -p audiocloud-domain-server ${{ matrix.features }}
      - name: Upload domain server binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.build }}/release/audiocloud-domain-server${{ matrix.exe }}
          asset_name: audiocloud_domain_server-${{ matrix.build }}${{ matrix.exe }}
          asset_content_type: application/octet-stream
  reaper_plugin:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary: libaudiocloud_reaper_plugin.so
          - build: x86_64-pc-windows-msvc
            os: windows-latest
            binary: audiocloud_reaper_plugin.dll
            dll: ".dll"
          - build: x86_64-apple-darwin
            os: macos-latest
            binary: libaudiocloud_reaper_plugin.dylib
          - build: aarch64-apple-darwin
            os: macos-latest
            binary: libaudiocloud_reaper_plugin.dylib

    name: ${{ matrix.build }} REAPER Plugin
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.build }}-plugin-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-plugin-${{ env.cache-name }}-
            ${{ matrix.build }}-plugin-
      - name: Setup MSVC toolchain
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y protobuf-compiler
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf
      - name: Install windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc
      - name: Install rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.build }}
      - name: Build REAPER plugin
        run: |
          cargo build --release --target=${{ matrix.build }} -p audiocloud-reaper-plugin
      - name: Upload reaper plugin binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.build }}/release/${{ matrix.binary }}
          asset_name: audiocloud_reaper_plugin-${{ matrix.build }}${{ matrix.dll }}
          asset_content_type: application/octet-stream
  instance_driver:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
          - build: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - build: x86_64-pc-windows-msvc
            os: windows-latest
            exe: ".exe"
          - build: x86_64-apple-darwin
            os: macos-latest
          - build: aarch64-apple-darwin
            os: macos-latest

    name: ${{ matrix.build }} Instance Driver
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.build }}-driver-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-driver-${{ env.cache-name }}-
            ${{ matrix.build }}-driver-
      - name: Setup MSVC toolchain
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y protobuf-compiler libusb-1.0-0-dev libssl-dev
      - name: Install Linux cross compiler
        if: matrix.build == 'armv7-unknown-linux-gnueabihf'
        run: |
          apt -y install gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
      - name: Install Linux cross compiling deps
        uses: ryankurte/action-apt@v0.3.0
        if: matrix.build == 'armv7-unknown-linux-gnueabihf'
        with:
          arch: armhf
          packages: "libssl-dev:armhf libusb-1.0-0-dev:armhf"
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf libusb
      - name: Install windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc
      - name: Install rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.build }}
      - name: Build Driver
        run: |
          cargo build --release --target=${{ matrix.build }} -p audiocloud-driver
      - name: Upload driver binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.build }}/release/audiocloud-driver${{ matrix.exe }}
          asset_name: audiocloud_driver-${{ matrix.build }}${{ matrix.exe }}
          asset_content_type: application/octet-stream
