syntax = "proto3";

package io.audiocloud.media.v1;

import "io/audiocloud/media/v1/media.proto";
import "io/audiocloud/media/v1/upload.proto";
import "io/audiocloud/media/v1/download.proto";

import "google/protobuf/empty.proto";

service DomainMediaService {
  rpc GetMedia(GetMediaRequest) returns (GetMediaResponse);
  rpc ListMedia(ListMediaRequest) returns (ListMediaResponse);
  rpc ImportMedia(ImportMediaRequest) returns (ImportMediaResponse);
  rpc DownloadMedia(DownloadMediaRequest) returns (DownloadMediaResponse);
  rpc UploadMedia(UploadMediaRequest) returns (UploadMediaResponse);
  rpc SubscribeDownloadProgress(SubscribeDownloadProgressRequest) returns (stream DownloadProgressEvent);
  rpc SubscribeUploadProgress(SubscribeUploadProgressRequest) returns (stream UploadProgressEvent);
  rpc CancelDownload(CancelDownloadRequest) returns (google.protobuf.Empty);
  rpc CancelUpload(CancelUploadRequest) returns (google.protobuf.Empty);
}

message DownloadMediaRequest {
  string app_id = 1;
  string media_id = 2;
  string get_url = 3;
  string sha_256 = 4;
}

message DownloadMediaResponse {
  string app_id = 1;
  string media_id = 2;
  optional string download_id = 3;
}

message UploadMediaRequest {
  string app_id = 1;
  string media_id = 2;
  repeated UploadMediaPart parts = 10;
}

message UploadMediaPart {
  string put_url = 1;
  uint32 part_number = 2;
  map<string, string> headers = 3;
  optional uint64 range_from = 4;
  optional uint64 range_to = 5;
}

message UploadMediaResponse {
  string media_id = 1;
  string upload_id = 2;
}

message SubscribeUploadProgressRequest {
  string media_id = 1;
  string upload_id = 2;
}

message SubscribeDownloadProgressRequest {
  string media_id = 1;
  string download_id = 2;
}

message GetMediaRequest {
  string app_id = 1;
  string media_id = 2;
}

message GetMediaResponse {
  string app_id = 1;
  string media_id = 2;
  string sha_256 = 3;
  uint64 length = 4;
  uint32 sample_rate = 5;
  uint32 channels = 6;
  string format = 7;
  string codec = 8;

  map<string, UploadProgressEvent> uploads = 10;
  optional DownloadProgressEvent download = 11;
}

message ListMediaRequest {
  optional string filter_app_id = 1;
  optional string filter_media_id = 2;
  optional uint32 filter_sample_rate = 3;
  optional uint32 filter_channels = 4;
  optional string filter_format = 5;
  optional string filter_codec = 6;

  uint32 offset = 10;
  uint32 limit = 11;
}

message ListMediaResponse {
  repeated MediaSummary media = 1;
}

message CancelDownloadRequest {
  string app_id = 1;
  string media_id = 2;
  string download_id = 3;
}

message CancelUploadRequest {
  string app_id = 1;
  string media_id = 2;
  string download_id = 3;
}

message ImportMediaRequest {
  string app_id = 1;
  string media_id = 2;
}

message ImportMediaResponse {
  string app_id = 1;
  string media_id = 2;
  string sha_256 = 3;
  uint64 length = 4;
}